<?php
/**
 * Created by PhpStorm.
 * User: Vaidakovich
 * Date: 17.05.2016
 * Time: 10:53
 */
/***********************************************************************************************************************
 * 1. С помощью цикла while выведите все числа в промежутке от 0 до 100, которые делятся на 3 без остатка.
 * 2. С помощью цикла do…while напишите функцию для вывода чисел от 0 до 10, чтобы результат выглядел так:
 *      0 – это ноль 1 – нечетное число 2 – четное число 3 – нечетное число … 10 – четное число
 * 3. Задание со звездочкой. Выведите с помощью цикла for числа от 0 до 9, НЕ используя тело цикла.
 *      То есть выглядеть должно вот так: for(…){// здесь пусто}
 * 4. Объявите массив, где в качестве ключей будут использоваться названия областей, а в качестве значений – массивы
 *      с названиями городов из соответствующей области. Выведите в цикле значения массива, чтобы результат был таким:
 *      Московская область: Москва, Зеленоград, Клин
 *      Ленинградская область: Санкт-Петербург, Всеволожск, Павловск, Кронштадт
 *      Рязанская область …                                     (названия городов можно найти на maps.yandex.ru)
 * 5. Задание со звездочкой. Повторите предыдущее задание, но выводите на экран только города, начинающиеся с буквы «К».
 * 6. Объявите массив, индексами которого являются буквы русского языка, а значениями – соответствующие латинские
 *      буквосочетания (‘а’=> ’a’, ‘б’ => ‘b’, ‘в’ => ‘v’, ‘г’ => ‘g’, …, ‘э’ => ‘e’, ‘ю’ => ‘yu’, ‘я’ => ‘ya’).
 *      Напишите функцию транслитерации строк.
 * 7. Напишите функцию, которая заменяет в строке пробелы на подчеркивания и возвращает видоизмененную строчку.
 * 8. Объедините две ранее написанные функции в одну, которая получает строку на русском языке, производит транслитерацию
 *      и замену пробелов на подчеркивания (аналогичная задача решается при конструировании url-адресов на основе
 *      названия статьи в блогах).
 **********************************************************************************************************************/

/**                                      Выводим HTML структуру                                                       */
echo <<<HTML
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Курс PHP1 Урок 3</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Курс PHP1 ДЗ №3</h1>
HTML;

/**********************************************************************************************************************/
error_reporting(E_ALL);
define('BR', "<br>\n"); // константа: <br> для переноса на новую строку в хтмл, \n для переноса на новую строку при просмотре исходника хтмл

/******************************************************  УПР1  ********************************************************/
echo '<div class="ex ex1">' . "\n";
echo '<h3>1. Все числа от 0 до 100 которые делятся на 3 без остатка через while</h3>' . BR;

$i = 0;
while ($i <= 100) {
    if (($i % 3) == 0)
        echo $i . "\t";
    $i++;
}

echo '</div>'; // закрыли ex1


/******************************************************  УПР2  ********************************************************/
echo '<div class="ex ex2">' . "\n";
echo '<h3>2. С помощью цикла do…while вывести: 0 – это ноль 1 – нечетное число 2 – четное число 3 – нечетное число … 10 – четное число</h3>' . BR;


function OddFromTen()
{
    $l = 0;
    $result = '';

    do {
        if ($l++ == 0) // инкремент(++) срабатывает после использованяи значения переменной в вычислениях НО ПРИ КАЖДОЙ ПРОВЕРКЕ!!!!!! поэтому второй инкремент не нужен!!!!
            $result .= "0 - это нуль; ";

        if (($l % 2) == 0) {
            $result .= "$l - чётное число; ";
        } else
            $result .= "$l - нечётное число; ";
//        $l++;         // поэтому второй инкремент не нужен
    } while ($l < 10);

    return $result;
}

echo OddFromTen() . BR;
echo '</div>'; // закрыли ex2


/******************************************************  УПР3  ********************************************************/
echo '<div class="ex ex3">' . "\n";
echo '<h3>3.C помощью for(…){// здесь пусто} вывести числа от 0 до 9, НЕ используя тело цикла</h3>' . BR;

for ($i = 0; $i < 10; $i++, print ('i=' . $i . "\t")) ;

echo '</div>'; // закрыли ex3


/******************************************************  УПР4  ********************************************************/
echo '<div class="ex ex4">' . "\n";
echo '<h3>4. Массив, в качестве ключей используются названия областей, а в качестве значений – массивы с названиями
             городов из соответствующей области. Вывод значений массива в цикле. Если массив городов в области пуст, название области не выводится</h3>' . BR;

$region = ['Московская область' => array('Видное', 'Дмитров', 'Зарайск', 'Истра', 'Kрасногорск', 'Луховицы', 'Можайск', 'Ногинск', 'Орехово-Зуево', 'Пушкино', 'Руза', 'Солнечногорск', 'Талдом', 'Чехов', 'Шатура', 'Щёлково'),
    'Тверская область' => array('Андреаполь', 'Бежецк', 'Весьегонск', 'Зубцов', 'калязин', 'Лихославль', 'Нелидово', 'Осташков', 'Ржев', 'Старица', 'Торжок', 'Тверь', 'Удомля'),
    'Владимирская область' => array('Александров', 'Владимир', 'Вязники', 'Гороховец', 'Камешково', 'Лакинск', 'Меленки', 'Петушки', 'Радужный', 'Собинка', 'Юрьев-Польский'),
    'Калужская область' => array('Балабаново', 'Ермолино', 'Жиздра', 'kалуга', 'Кондрово', 'Людиново', 'Мосальск', 'Обнинск', 'Спас-Деменск', 'Таруса', 'Юхнов'),
    'Липецкая область' => array('Грязи', 'Данков', 'Елец', 'Задонск', 'Лебедянь', 'Липецк', 'Усмань', 'Чаплыгин'),
    'Воронежская область' => array()
];

//var_dump( $region['Липецкая область']);

foreach ($region as $oblast => $goroda) {
    if (!empty($goroda)) {
        echo "$oblast: " . BR;

        foreach ($goroda as $g) {
            echo "$g, ";
        }
    }

    echo BR . BR;
}
unset ($g); // разорвать связь с последним элементом массива чтоб не поменять его
echo '</div>'; // закрыли ex4


/******************************************************  УПР5  ********************************************************/
echo '<div class="ex ex5">' . "\n";
echo '<h3>5. То же что и в 4. но выводятся только те города в которых первая буква "К". Если городов на "К" нет, этот регион не выводится.</h3>';

//echo mb_internal_encoding();
function list_towns_begin_k($region)
{
    $result = "";
    $region_result = '';
    $have_k = false;
    foreach ($region as $oblast => $goroda) {
        foreach ($goroda as $g) {   // т.к. скрипт и сервер работают в utf-8 то нужно сравнивать первые 2 символа(байта) для русских символов
            //  if ( strncasecmp($g,"к", 2)==0 || strncmp($g,"К", 2)==0 || strncmp($g,"K", 1)==0 || strncmp($g, "k", 1 )==0 ) */

            /** int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )
             * /** мультибайтовый Поиск позиции первого вхождения одной строки в другую, нечувствителен к регистру      */
            if (mb_stripos($g, "k") === 0 || mb_stripos($g, "к") === 0) {
                $region_result .= "$g, ";
                $have_k = true;
            }
//            echo $g . "\t" . (int)mb_stripos($g, "k" ) . "\t" . (int)mb_stripos($g, "к") . BR;
        }
        if ($have_k) {
            $result .= BR . BR . "$oblast: " . BR . $region_result;
            $have_k = false;
        }
        $region_result = "";
    }
    return $result;
}

echo list_towns_begin_k($region);
echo '</div>'; // закрыли ex5


/******************************************************  УПР6  ********************************************************/
echo '<div class="ex ex6">' . "\n";
echo '<h3>6. Функция транслитерации строк используя алфавит в массиве и цикл с проходом по каждому символу исходной строки.
      <br>Недостаток: обращение к неопределённому элементу массива если какой-то символ отсутсвует в алфавите, все символы в алфавит помещать трудно и они могут появляться/меняться/убираться в языке или кодировке.</h3>';

function transliteration($str_to_transliterate = "")
{
    $i = 0;
    $result = '';
    $alphabet = ['а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh', 'з' => 'z',
        'и' => 'i', 'й' => 'yi', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r',
        'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch',
        'ъ' => '"', 'ы' => 'y', 'ь' => "'", 'э' => 'e', 'ю' => 'yu', 'я' => 'ya', '.' => '.', ' ' => ' ', ',' => ',', '_' => '_', ';' => ';'];


    $str_to_transliterate = mb_strtolower($str_to_transliterate);
    while ($i < mb_strlen($str_to_transliterate)) {
//        echo mb_substr( $str_to_transliterate, $i, 1);
        $result .= $alphabet[mb_substr($str_to_transliterate, $i++, 1)];
    }
    return $result;
}

// пришлось делать в одну строку чтоб не добавлять в массив символы переноса ))
$str_test = 'Всё ускоряющаяся эволюция компьютерных технологий предъявила жёсткие требования к производителям как собственно вычислительной техники, так и периферийных устройств.';

echo BR . transliteration($str_test) . BR;

echo '</div>'; // закрыли ex6


/******************************************************  УПР6-1 ********************************************************/
echo '<div class="ex ex6-1">' . "\n";
echo '<h3>6.1 Функция транслитерации строк используя алфавит в массиве и функцию работы со строками strtr().
      <br>Символы не перечисленные в алфавите пропускаются без изменений.</h3>';

function transliteration_replace($str_to_transliterate)
{
    $alphabet = ['а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh', 'з' => 'z', 'и' => 'i', 'й' => 'yi', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch', 'ъ' => '"', 'ы' => 'y', 'ь' => "'", 'э' => 'e', 'ю' => 'yu', 'я' => 'ya',
        'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'YO', 'Ж' => 'ZH', 'З' => 'Z', 'И' => 'I', 'Й' => 'YI', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'KH', 'Ц' => 'TS', 'Ч' => 'CH', 'Ш' => 'SH', 'Щ' => 'SCH', 'Ъ' => '"', 'Ы' => 'Y', 'Ь' => "'", 'Э' => 'E', 'Ю' => 'YU', 'Я' => 'YA'];
    return strtr($str_to_transliterate, $alphabet);

    /* strtr() — Преобразует заданные символы или заменяет подстроки
    string strtr ( string $str , string $from , string $to )
    string strtr ( string $str , array $replace_pairs )*/

    //этот блок отрабатывает некорректно т.к. str_replace() и str_ireplace() сравнивает i-тый исходный и i-тый заменённый с замещающими, подробности http://php.net/manual/ru/function.str-replace.php
//    $alphabet_ru =          [ 'а', 'б', 'в', 'г', 'д', 'е', 'ё',  'ж',  'з', 'и', 'й',  'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц',  'ч',  'ш',  'щ',   'ъ', 'ы', 'ь', 'э', 'ю',  'я'  ];
//    $alphabet_translit =    [ 'a', 'b', 'v', 'g', 'd', 'e', 'yo', 'zh', 'z', 'i', 'yi', 'k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'h', 'ts', 'ch', 'sh', 'sch', '"', 'y', "'", 'e', 'yu', 'ya' ];
//    return str_ireplace( $alphabet_ru, $alphabet_translit, $str_to_transliterate);
}

echo transliteration_replace($str_test);
echo '</div>'; // закрыли ex6-1


/******************************************************  УПР7  ********************************************************/
echo '<div class="ex ex7">' . "\n";
echo '<h3>7. Функция заменяет пробелы на подчёркивания. Выполняет поиск пробела в исходной, берёт подстроки между пробелами и вместо пробелов соединяет подчёркиваниями.</h3>';

function space_to_underscore($str_to_underscore)
{
    /**mb_substr () - возвращает часть строки/
    /** string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )  */

        define( 'STR_TO_UNDERSCORE_LENGTH', mb_strlen( $str_to_underscore));
        $result = "";
        $start = 0;     // позиция от которой берем часть строки
    //    $end = 0;     // позиция в которй нашли пробел
        while ( mb_strlen($result) < STR_TO_UNDERSCORE_LENGTH )
        {
            $end=mb_stripos( $str_to_underscore, " ", $start);
            if ( $end===false )
            {
                $result .= mb_substr( $str_to_underscore, $start );
    //            echo "\t ($start | $end | $result) конец строки";
            }
            else {
                $result .= mb_substr( $str_to_underscore, $start, $end-$start) ."_";
                $start=$end+1;
    //            echo "\t( $start | $end | $result )";
            }
        }
    return $result;
}

echo BR . space_to_underscore(" раз   дыва триии     ") . BR . BR;

echo '</div>'; // закрыли ex7


/******************************************************  УПР7-1  ********************************************************/
echo '<div class="ex ex7-1">' . "\n";
echo '<h3>7.1 Функция замены пробелов на подчёркивание. Используется функция работы со строками str_replace() что сокращает код до 1 строки.</h3>';

function space_to_underscore_use_replace($str_to_underscore)
{
    /** mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] ) работает с мультибайтовыми кодировками*/
    return str_replace(" ", "_", $str_to_underscore);
}

echo space_to_underscore_use_replace("  два пробела в начале,     5 пробелов в середине и три в конце   " );
echo '</div>'; // закрыли ex7-1

/******************************************************  УПР8  ********************************************************/
echo '<div class="ex ex8">' . "\n";
echo '<h3>8. Аналог функции п.6 с добавлением замены пробела на символ подчёркивания "_" в алфавит.</h3>';

function transliteration_with_underscore($str_to_transliterate = "")
{
    $i = 0;
    $result = '';
    $alphabet = ['а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh', 'з' => 'z',
        'и' => 'i', 'й' => 'yi', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r',
        'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'h', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch',
        'ъ' => '"', 'ы' => 'y', 'ь' => "'", 'э' => 'e', 'ю' => 'yu', 'я' => 'ya', '.' => '.', ' ' => '_', ',' => ',', '_' => '_', ';' => ';'];


    $str_to_transliterate = mb_strtolower($str_to_transliterate);
    while ($i < mb_strlen($str_to_transliterate)) {
//        echo mb_substr( $str_to_transliterate, $i, 1);
        $result .= $alphabet[mb_substr($str_to_transliterate, $i++, 1)];
    }
    return $result;
}

// пришлось делать в одну строку чтоб не добавлять в массив символы переноса ))
$str_test = 'Всё ускоряющаяся эволюция компьютерных технологий предъявила жёсткие требования к производителям как собственно вычислительной техники, так и периферийных устройств.';

echo BR . transliteration_with_underscore($str_test) . BR;

echo '</div>'; // закрыли ex8


/*****************************************************  УПР8-1 ********************************************************/
echo '<div class="ex ex8-1">' . "\n";
echo '<h3>8.1 Функция транслитерации строк и замены пробела на символ подчёркивания "_" используя алфавит в массиве и strtr().</h3>';
echo '<p>добавив в "алфавит" соответствие пробел => подчёркивание получаем то что нужно</p>';

function transliteration_with_replace_and_underscore($str_to_transliterate)
{
    // добавляем в "алфавит" пробел=>подчёркивание и всё готово
    $alphabet = ['а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'yo', 'ж' => 'zh', 'з' => 'z', 'и' => 'i', 'й' => 'yi', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch', 'ъ' => '"', 'ы' => 'y', 'ь' => "'", 'э' => 'e', 'ю' => 'yu', 'я' => 'ya',
        'А' => 'A', 'Б' => 'B', 'В' => 'V', 'Г' => 'G', 'Д' => 'D', 'Е' => 'E', 'Ё' => 'YO', 'Ж' => 'ZH', 'З' => 'Z', 'И' => 'I', 'Й' => 'YI', 'К' => 'K', 'Л' => 'L', 'М' => 'M', 'Н' => 'N', 'О' => 'O', 'П' => 'P', 'Р' => 'R', 'С' => 'S', 'Т' => 'T', 'У' => 'U', 'Ф' => 'F', 'Х' => 'KH', 'Ц' => 'TS', 'Ч' => 'CH', 'Ш' => 'SH', 'Щ' => 'SCH', 'Ъ' => '"', 'Ы' => 'Y', 'Ь' => "'", 'Э' => 'E', 'Ю' => 'YU', 'Я' => 'YA', ' ' => '_'];
    return strtr($str_to_transliterate, $alphabet);
}

echo transliteration_with_replace_and_underscore($str_test);
echo '</div>'; // закрыли ex8-1


/*****************************************************  END  **********************************************************/
echo "<div class=\"footer\"></div>\n</body>\n</html>";
